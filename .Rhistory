varSelectInput("xvar", "X variable", df_num, selected = "area"),
varSelectInput("yvar", "Y variable", df_num, selected = "anio_construccion"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$tipo_operacion),
selected = unique(df$tipo_operacion)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$species)
df |> filter(Species %in% input$species)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = Species),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_species) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100)
}
shinyApp(ui, server)
shinyApp(ui, server)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "area"),
varSelectInput("yvar", "Y variable", df_num, selected = "anio_construccion"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$tipo_operacion),
selected = unique(df$tipo_operacion)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$tipo_operacion)
df |> filter(tipo_operacion %in% input$tipo_operacion)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$by_species) aes(color = Species),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_species) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100)
}
shinyApp(ui, server)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "area"),
varSelectInput("yvar", "Y variable", df_num, selected = "anio_construccion"),
checkboxGroupInput(
"species", "Filter by species",
choices = unique(df$tipo_operacion),
selected = unique(df$tipo_operacion)
),
hr(), # Add a horizontal rule
checkboxInput("by_species", "Show species", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$tipo_operacion)
df |> filter(tipo_operacion %in% input$tipo_operacion)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$tipo_operacions) aes(color = tipo_operacion),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_species) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_species, groupFill = input$by_species)
}
p
}, res = 100)
}
shinyApp(ui, server)
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "area"),
varSelectInput("yvar", "Y variable", df_num, selected = "anio_construccion"),
checkboxGroupInput(
"tipo_operacion", "Filter by tipo_operacion",
choices = unique(df$tipo_operacion),
selected = unique(df$tipo_operacion)
),
hr(), # Add a horizontal rule
checkboxInput("by_tipo_operacion", "Show tipo_operacion", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$tipo_operacion)
df |> filter(tipo_operacion %in% input$tipo_operacion)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$tipo_operacions) aes(color = tipo_operacion),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_tipo_operacion) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_tipo_operacion, groupFill = input$by_tipo_operacion)
}
p
}, res = 100)
}
shinyApp(ui, server)
df |> filter(by_tipo_operacion %in% input$tipo_operacion)
# Find subset of columns that are suitable for scatter plot
df_num <- df |> select(where(is.numeric))
ui <- page_sidebar(
theme = bs_theme(bootswatch = "minty"),
sidebar = sidebar(
varSelectInput("xvar", "X variable", df_num, selected = "area"),
varSelectInput("yvar", "Y variable", df_num, selected = "anio_construccion"),
checkboxGroupInput(
"tipo_operacion", "Filter by tipo_operacion",
choices = unique(df$tipo_operacion),
selected = unique(df$tipo_operacion)
),
hr(), # Add a horizontal rule
checkboxInput("by_tipo_operacion", "Show tipo_operacion", TRUE),
checkboxInput("show_margins", "Show marginal plots", TRUE),
checkboxInput("smooth", "Add smoother"),
),
plotOutput("scatter")
)
server <- function(input, output, session) {
subsetted <- reactive({
req(input$tipo_operacion)
df |> filter(tipo_operacion %in% input$tipo_operacion)
})
output$scatter <- renderPlot({
p <- ggplot(subsetted(), aes(!!input$xvar, !!input$yvar)) + list(
theme(legend.position = "bottom"),
if (input$tipo_operacions) aes(color = tipo_operacion),
geom_point(),
if (input$smooth) geom_smooth()
)
if (input$show_margins) {
margin_type <- if (input$by_tipo_operacion) "density" else "histogram"
p <- ggExtra::ggMarginal(p, type = margin_type, margins = "both",
size = 8, groupColour = input$by_tipo_operacion, groupFill = input$by_tipo_operacion)
}
p
}, res = 100)
}
shinyApp(ui, server)
View(df_num)
View(df_num)
# Find subset of columns that are suitable for scatter plot
penguins_csv <- "https://raw.githubusercontent.com/jcheng5/simplepenguins.R/main/penguins.csv"
penguins_csv <- read.csv(penguins_csv)
View(penguins_csv)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$df)
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$df)
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
shinyApp()
shinyApp(ui, server)
dataset <- get(input$dataset, df)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = df),
verbatimTextOutput("summary"),
tableOutput("table")
)
shinyApp(ui, server)
prod_codes <- setNames(df$anio_construccion, df$title)
prod_codes <- setNames(df$anio_construccion, df$tipo_operacion)
df_1 <- setNames(df$anio_construccion, df$tipo_operacion)
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "operacion", choices = tipo_operacion)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
ui <- fluidPage(
fluidRow(
column(6,
selectInput("code", "operacion", choices = df)
)
),
fluidRow(
column(4, tableOutput("diag")),
column(4, tableOutput("body_part")),
column(4, tableOutput("location"))
),
fluidRow(
column(12, plotOutput("age_sex"))
)
)
shinyApp(ui, server)
server <- function(input, output, session) {
selected <- reactive(injuries %>% filter(prod_code == input$code))
output$diag <- renderTable(
selected() %>% count(diag, wt = weight, sort = TRUE)
)
output$body_part <- renderTable(
selected() %>% count(body_part, wt = weight, sort = TRUE)
)
output$location <- renderTable(
selected() %>% count(location, wt = weight, sort = TRUE)
)
summary <- reactive({
selected() %>%
count(age, sex, wt = weight) %>%
left_join(population, by = c("age", "sex")) %>%
mutate(rate = n / population * 1e4)
})
output$age_sex <- renderPlot({
summary() %>%
ggplot(aes(age, n, colour = sex)) +
geom_line() +
labs(y = "Estimated number of injuries")
}, res = 96)
}
shinyApp(ui, server)
library(readxl)
function (x, df1, df2, ncp, log = FALSE)
{
if (missing(ncp))
.Call(C_df, x, df1, df2, log)
else .Call(C_dnf, x, df1, df2, ncp, log)
}
library(purrr)
library(tidyverse)
library(shiny)
library(bslib)
library(ggplot2)
library(ggExtra)
setwd("G:/Mi unidad/Capas/SEDETyM - DPE/vivienda/SIVyS")
lista <- list.files(pattern='*.csv', recursive = TRUE)
df.lista <- lapply(lista, read_csv)
df.lista<- df.lista %>% map(~ mutate(.x, across(everything(), ~as.character(.x))))
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio))
View(df)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("gas", dcaracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
View(df)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
View(df)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
)
View(df)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
balcon = ifelse(grepl("Balcón", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
terraza = ifelse(grepl("Terraza", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df$caracteristicas_de_la_vivienda %>%
mutate(director = strsplit(as.character(caracteristicas_de_la_vivienda), ",")) %>%
unnest(director)
car <- df$caracteristicas_de_la_vivienda %>%
mutate(director = strsplit(as.character(caracteristicas_de_la_vivienda), ",")) %>%
unnest(director)
car <- df$caracteristicas_de_la_vivienda
car <-as_data_frame(df$caracteristicas_de_la_vivienda)
View(car)
car <-as_tibble(df$caracteristicas_de_la_vivienda)
View(car)
car %>% mutate(director = strsplit(as.character(value), ",")) %>%
unnest(director)
d <- car %>% mutate(director = strsplit(as.character(value), ",")) %>%
unnest(director)
View(d)
unique(car$director)
unique(d$director)
arrange(unique(d$director))
sort(unique(d$director))
sort(unique(d$director))
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
balcon = ifelse(grepl("Balcón", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
terraza = ifelse(grepl("Terraza"|"Azotea", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
jardin = ifelse(grepl("Jardín", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
garage = ifelse(grepl("Garage", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
pileta = ifelse(grepl("Piscina", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
gimnasio = ifelse(grepl("Gimnasio", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
encargado = ifelse(grepl("Conserje", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
seguridad = ifelse(grepl("Seguridad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
balcon = ifelse(grepl("Balcón", aracteristicas_de_la_vivienda, fixed=TRUE),T,F),
terraza = ifelse(grepl("Terraza|Azotea", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
jardin = ifelse(grepl("Jardín", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
garage = ifelse(grepl("Garage", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
pileta = ifelse(grepl("Piscina", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
gimnasio = ifelse(grepl("Gimnasio", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
encargado = ifelse(grepl("Conserje", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
seguridad = ifelse(grepl("Seguridad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
balcon = ifelse(grepl("Balcón", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
terraza = ifelse(grepl("Terraza|Azotea", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
jardin = ifelse(grepl("Jardín", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
garage = ifelse(grepl("Garage", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
pileta = ifelse(grepl("Piscina", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
gimnasio = ifelse(grepl("Gimnasio", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
encargado = ifelse(grepl("Conserje", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
seguridad = ifelse(grepl("Seguridad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
balcon = ifelse(grepl("Balcón", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
terraza = ifelse(grepl("Terraza", caracteristicas_de_la_vivienda, fixed=TRUE)|grepl("Azotea", caracteristicas_de_la_vivienda, fixed = TRUE),T,F),
jardin = ifelse(grepl("Jardín", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
garage = ifelse(grepl("Garage", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
pileta = ifelse(grepl("Piscina", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
gimnasio = ifelse(grepl("Gimnasio", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
encargado = ifelse(grepl("Conserje", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
seguridad = ifelse(grepl("Seguridad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
View(car)
View(df)
df <- bind_rows(df.lista, .id= "id") %>%
mutate(anio_construccion = parse_number(anio_construccion),
area = parse_number(area),
banios = parse_number(banios),
moneda = ifelse(grepl("USD", precio, fixed=TRUE),"USD","PESOS"),
precio = parse_number(precio),
gas = ifelse(grepl("Gas", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
elec = ifelse(grepl("Electricidad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
agua = ifelse(grepl("Agua", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
internet = ifelse(grepl("Internet", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
parrilla = ifelse(grepl("Parrilla", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
balcon = ifelse(grepl("Balcón", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
terraza = ifelse(grepl("Terraza", caracteristicas_de_la_vivienda, fixed=TRUE)|grepl("Azotea", caracteristicas_de_la_vivienda, fixed = TRUE),T,F),
patio = ifelse(grepl("PAtio", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
jardin = ifelse(grepl("Jardín", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
garage = ifelse(grepl("Garage", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
pileta = ifelse(grepl("Piscina", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
gimnasio = ifelse(grepl("Gimnasio", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
calefac = ifelse(grepl("Calefacción", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
encargado = ifelse(grepl("Conserje", caracteristicas_de_la_vivienda, fixed=TRUE),T,F),
seguridad = ifelse(grepl("Seguridad", caracteristicas_de_la_vivienda, fixed=TRUE),T,F)
)
View(d)
View(df)
library(googlesheets4)
library(tidyverse)
library(sf)
rm(list = ls())
setwd("G:/Mi unidad/Capas/SEDETyM - Proyectos Urbanos/Paradas de  colectivos")
