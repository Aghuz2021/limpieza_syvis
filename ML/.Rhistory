# Obtiene el directorio donde está el script en ejecución
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
# Establece el directorio de trabajo en la ubicación del script
setwd(wd)
# Carga el archivo GeoJSON que contiene las zonas geográficas
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
# Asigna una zona a cada localidad según su nombre
mutate(zonas = case_when(
nombre == "Once de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Martín" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre # Si no coincide con ninguna, mantiene el nombre original
))
# Lee el archivo de cotización del dólar
cot_dolar <- readxl::read_xlsx(paste0("insumo/", "cot_dolar.xlsx")) %>%
# Convierte la fecha a formato "YYYY-MM"
mutate(mes = format(as.Date(mes), format = "%Y-%m"))
# Lee otro archivo GeoJSON con datos de desarrollo prioritario
ZDP_sivys <- sf::read_sf("insumo/desarrollo_prioritario.geojson")
# Pide al usuario que ingrese el año y mes de los datos a procesar
anio <- dlg_input(message = "Ingresar año en formato AAAA")$res
mes <- dlg_input(message = "Ingresar mes formato MM")$res
# Construye el nombre del archivo en función del año y mes ingresado
file_nom <- paste0("insumo/", anio, "_", mes, "_ml.xlsx")
# Carga el archivo Excel correspondiente y agrega una columna con el año y mes
archivo <- readxl::read_xlsx(file_nom) %>%
mutate(mes = paste(anio, mes, sep = "-"))
archivo <- archivo %>%
mutate(across(c(TOTAL_AREA, COVERED_AREA, BEDROOMS, ROOMS, HAS_LAUNDRY,
HAS_GYM, HAS_MULTIPURPOSE_ROOM, HAS_PARTY_ROOM,
HAS_SWIMMING_POOL, HAS_GRILL, FULL_BATHROOMS, PROPERTY_AGE),
as.numeric))
archivo <- archivo %>%
mutate(across(c(TOTAL_AREA, COVERED_AREA, BEDROOMS, ITE_CURRENT_PRICE, PRECIO_LOCAL,
ROOMS, HAS_LAUNDRY, HAS_GYM, HAS_MULTIPURPOSE_ROOM,
HAS_SWIMMING_POOL, HAS_GRILL, FULL_BATHROOMS, PROPERTY_AGE),
~ as.integer(round(as.numeric(.)))))
glimpse(archivo)
# revisa si nuestro archivo a limpiar no tiene id duplicados
archivo_duplicados <- archivo[duplicated(archivo$`Item ID`), ]
# crea otra tabla con los datos sospechosos (valores repetidos)
verifica_Cual_borra_Repetido <- archivo %>%
filter(
(SIT_CURRENCY_ID == "ARG" & grepl("^([0-8])\\1+$", as.character(PRECIO_LOCAL))) | # Si la moneda es ARS y el precio tiene un patrón repetitivo
(SIT_CURRENCY_ID == "DOL" & grepl("^([0-8])\\1+$", as.character(ITE_CURRENT_PRICE))) # Si la moneda es USD y el precio tiene un patrón repetitivo
) %>%
mutate(
PRECIO_LOCAL = as.numeric(PRECIO_LOCAL),
ITE_CURRENT_PRICE = as.numeric(ITE_CURRENT_PRICE)
)
View(verifica_Cual_borra_Repetido)
# Filtra el archivo eliminando los valores con patrones repetitivos.
archivo <- archivo %>%
filter(
(SIT_CURRENCY_ID == "ARG" & !grepl("^([0-8])\\1+$", as.character(PRECIO_LOCAL))) |
(SIT_CURRENCY_ID == "DOL" & !grepl("^([0-8])\\1+$", as.character(ITE_CURRENT_PRICE)))
) %>%
mutate(
PRECIO_LOCAL = as.numeric(PRECIO_LOCAL),
ITE_CURRENT_PRICE = as.numeric(ITE_CURRENT_PRICE)
)
# De nuestro archivo a limpiar Elimina las filas donde ambas columnas (TOTAL_AREA y COVERED_AREA) sean nulas
archivo <- archivo %>%
filter(
!is.na(TOTAL_AREA) | !is.na(COVERED_AREA)
)
# Convierte las coordenadas a valores numéricos y reemplaza los `NA`
archivo <- archivo %>%
mutate(across(
c(ITE_ADD_LATITUDE, ITE_ADD_LONGITUDE),
~ replace_na(as.numeric(.), NA)
))
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>% # Une con la tabla de cotización usando la columna "mes"
mutate(
LONGITUDE = str_replace_all(ITE_ADD_LONGITUDE, ",", "."), # Reemplaza comas por puntos en las coordenadas
LATITUDE = str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom), 2) # Redondea el tipo de cambio a 2 decimales
)
archivo <- filter(archivo, !is.na(LATITUDE) | LATITUDE == "")
archivo <- filter(archivo, !is.na(LONGITUDE) | LONGITUDE == "")
archivo <- st_as_sf(archivo,
coords = c("LONGITUDE", "LATITUDE"),
crs = 4326
)
archivo <- mutate(archivo,
dummy_dolar = ifelse(SIT_CURRENCY_ID == "DOL", T, F)
) %>%
mutate(
precio_pesos = round(
ifelse(dummy_dolar == F, as.numeric(ITE_CURRENT_PRICE),as.numeric(ITE_CURRENT_PRICE) * tc_prom), 2
),
precio_dolares = round(
ifelse(dummy_dolar == T, as.numeric(ITE_CURRENT_PRICE),as.numeric(ITE_CURRENT_PRICE) / tc_prom), 2
)
)
# invoco a las funiones para realizar los calculos necesarios
# Función para calcular 'pesosm2tot'
pesosm2tot_funct <- function(precio_pesos, TOTAL_AREA) {
round(precio_pesos / TOTAL_AREA, 0)
}
# Función para calcular 'dolaresm2tot'
dolaresm2tot_funct <- function(precio_dolares, TOTAL_AREA) {
round(precio_dolares / TOTAL_AREA, 0)
}
# Función para calcular 'pesosm2_cub'
pesosm2_cub_funct <- function(precio_pesos, COVERED_AREA) {
round(precio_pesos / COVERED_AREA, 0)
}
# Función para calcular 'dolaresm2_cub'
dolaresm2_cub_funct <- function(precio_dolares, COVERED_AREA) {
round(precio_dolares / COVERED_AREA, 0)
}
archivo$TOTAL_AREA <- as.numeric(archivo$TOTAL_AREA)
archivo <- archivo %>%
mutate(
pesosm2tot = round(pesosm2tot_funct(precio_pesos, TOTAL_AREA), 0),
dolaresm2tot = round(dolaresm2tot_funct(precio_dolares, TOTAL_AREA), 0),
pesosm2_cub = round(pesosm2_cub_funct(precio_pesos, COVERED_AREA), 0),
dolaresm2_cub = round(dolaresm2_cub_funct(precio_dolares, COVERED_AREA), 0)
) %>%
select(
-MESLISTING, -ITE_ADD_STATE_NAME, -ITE_ADD_CITY_NAME,
-ITE_ADD_LONGITUDE, -ITE_ADD_LATITUDE, -ITE_ADD_NEIGHBORHOOD_NAME_1,
-ITE_ADD_NEIGHBORHOOD_NAME, -SIT_SITE_ID
)
archivo <- sf::st_join(archivo, ZDP_sivys, join = sf::st_within)
archivo <- sf::st_join(archivo, zonas_sivys, join = sf::st_within)
archivo <- archivo %>%
mutate(Ambientes = case_when(
ROOMS <= 1 ~ "1 ambiente",
ROOMS == 2 ~ "2 ambientes",
ROOMS >= 3 ~ "Mas de 3 ambientes",
TRUE ~ NA_character_ # Caso por defecto si ninguna condición se cumple
))
archivo <- archivo %>%
mutate(Anio_propiedad = case_when(
PROPERTY_AGE == 0 ~ 2025,
PROPERTY_AGE < 1890 ~ (2025 - PROPERTY_AGE),
TRUE ~ PROPERTY_AGE # Caso por defecto si ninguna condición se cumple
))
archivo <- archivo %>%
mutate(cantidad_anio = case_when(
!is.na(Anio_propiedad) ~ (2025 - Anio_propiedad), # Si Anio_propiedad no es NA, calcula la antigüedad
TRUE ~ Anio_propiedad # Si es NA, lo deja igual
)) %>%
filter(cantidad_anio <= 135 | is.na(cantidad_anio)) # Filtra antigüedad válida o NA
# Elimina los poligonos que no cumplen en tres de febrero.
archivo_limp <- st_filter(archivo, zonas_sivys, .predicate = st_within)
paste(
nrow(archivo) - nrow(archivo_limp),
"casos han sido limpiados por no estar contenidos en los poligonos de localidades.", " Se eliminó el",
round((nrow(archivo) - nrow(archivo_limp)) / nrow(archivo) * 100, 2), "porcien de los casos"
)
cas_elimin <- nrow(archivo) - nrow(archivo_limp)
#limpia mts2 totales menores a mts2 cubiertos.
archivo_limp <- archivo_limp %>% filter(TOTAL_AREA >= COVERED_AREA)
# muestra los casos eliminados por mts2 totales menores a mts2 cubiertos.
paste(
nrow(archivo) - (nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por mts2 totales menores a mts2 cubiertos.", " Se eliminó el",
round((nrow(archivo) - nrow(archivo_limp)) / nrow(archivo) * 100, 2), "%"
)
print(cas_elimin)
archivo_limp <- filter(archivo_limp, archivo_limp$TOTAL_AREA >= 10)
paste(
nrow(archivo) - (nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por tener metros cuadrados totales menores a 10", " Se eliminó el",
round((nrow(archivo) - (nrow(archivo_limp) + cas_elimin)) / (nrow(archivo) + cas_elimin) * 100, 2), "porcien de los casos"
)
print(cas_elimin)
archivo_limp <- archivo_limp[(archivo_limp$OPERATION == "Venta" & archivo_limp$dolaresm2tot >= 100) |
archivo_limp$OPERATION == "Alquiler", ]
limp_vent_casa <- filter(archivo_limp, OPERATION == "Venta", PROPERTY_TYPE == "Casa")
limp_vent_casa <- limp_vent_casa %>%
group_by(nombre) %>%
mutate(
outlier = case_when(
n() >= 20 ~ dolaresm2tot %in% boxplot.stats(dolaresm2tot)$out,
TRUE ~ FALSE # Si hay menos de 100 publicaciones, no se marcan outliers
)
) %>%
ungroup()
# Guardar los outliers eliminados
outliers_vent_casa <- limp_vent_casa %>%
filter(outlier) %>%
select(nombre, dolaresm2tot) # Selecciona columnas clave (puedes agregar más)
View(outliers_vent_casa)
write_csv(outliers_vent_casa, paste0("Resultados2/outliers_eliminados/outliers_venta_casa_localidad_", mes, "_", anio,".csv"))
# Eliminar los outliers del dataset principal
archivo_limp_vent_sin_out_casa <- limp_vent_casa %>%
filter(!outlier) %>%
select(-outlier)
#-------------------------------------------------------------------------#
limp_vent_departamento <- filter(archivo_limp, OPERATION == "Venta", PROPERTY_TYPE == "Departamento")
limp_vent_departamento <- limp_vent_departamento %>%
group_by(nombre) %>%
mutate(
outlier = case_when(
n() >= 20 ~ dolaresm2tot %in% boxplot.stats(dolaresm2tot)$out,
TRUE ~ FALSE # Si hay menos de 100 publicaciones, no se marcan outliers
)
) %>%
ungroup()
# Guardar los outliers eliminados
outliers_vent_depto <- limp_vent_departamento %>%
filter(outlier) %>%
select(nombre, dolaresm2tot) # Selecciona columnas clave (puedes agregar más)
write_csv(outliers_vent_casa, paste0("Resultados2/outliers_eliminados/outliers_venta_depto_localidad_", mes, "_", anio,".csv"))
# Eliminar los outliers del dataset principal
archivo_limp_vent_sin_out_depto <- limp_vent_departamento %>%
filter(!outlier) %>%
select(-outlier) # Quita la columna auxiliar
# unifica el archivo de Venta (casa y depto)
archivo_limp_sin_out_completo_venta <- bind_rows(archivo_limp_vent_sin_out_casa, archivo_limp_vent_sin_out_depto)
limp_vent_otros <- filter(archivo_limp, OPERATION == "Venta", PROPERTY_TYPE != "Casa", PROPERTY_TYPE != "Departamento")
# creamos la variable que contiene los datos de alquiler y departamento.
limp_alq_departamento <- filter(archivo_limp, OPERATION == "Alquiler")
# unifica el archivo de Venta y alquiler.
archivo_limp_sin_out_completo <- bind_rows(archivo_limp_sin_out_completo_venta, limp_alq_departamento)
archivo_limp_sin_out_completo_venta <- bind_rows(archivo_limp_sin_out_completo_venta, limp_vent_otros)
# Calcular diferencia de publicaciones eliminadas por tipo de propiedad
diferencias_publicaciones3 <- data.frame(
PROPERTY_TYPE = c("Casa", "Departamento"),
eliminados = c(
nrow(limp_vent_casa) - nrow(archivo_limp_vent_sin_out_casa),
nrow(limp_vent_departamento) - nrow(archivo_limp_vent_sin_out_depto)
)
)
# Mostrar resultado
print(diferencias_publicaciones3)
# calcula diferencia de publicaciones del archivo limpio con out y sin out general
diferencia_publicaciones4 <- nrow(archivo_limp) - nrow(archivo_limp_sin_out_completo)
# Mostrar resultado
print(diferencia_publicaciones4)
carpeta <- paste0("Resultados2/combinado_por_mes/Localidades/", mes, "_", anio)
dir.create(carpeta, recursive = TRUE)
# Crear la ruta completa del archivo CSV
ruta <- paste0(carpeta, "/archivo_limp_sin_out_completo.csv")
# Guardar el archivo CSV en la ruta generada
write_csv(archivo_limp_sin_out_completo, ruta)
View(archivo_limp_sin_out_completo_venta)
View(archivo_limp_sin_out_completo)
View(limp_vent_otros)
#elimina el entorno de trabajo anterior usando `rm(list = ls())`, lo cual asegura que no haya variables previas en el entorno.
rm(list = ls())
# Desactiva la notación científica en los números (evita valores como 1e+06)
options(scipen = 100)
# Obtiene el directorio donde está el script en ejecución
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
# Establece el directorio de trabajo en la ubicación del script
setwd(wd)
# Carga el archivo GeoJSON que contiene las zonas geográficas
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
# Asigna una zona a cada localidad según su nombre
mutate(zonas = case_when(
nombre == "Once de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Martín" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre # Si no coincide con ninguna, mantiene el nombre original
))
# Lee el archivo de cotización del dólar
cot_dolar <- readxl::read_xlsx(paste0("insumo/", "cot_dolar.xlsx")) %>%
# Convierte la fecha a formato "YYYY-MM"
mutate(mes = format(as.Date(mes), format = "%Y-%m"))
# Lee otro archivo GeoJSON con datos de desarrollo prioritario
ZDP_sivys <- sf::read_sf("insumo/desarrollo_prioritario.geojson")
# Pide al usuario que ingrese el año y mes de los datos a procesar
anio <- dlg_input(message = "Ingresar año en formato AAAA")$res
mes <- dlg_input(message = "Ingresar mes formato MM")$res
# Construye el nombre del archivo en función del año y mes ingresado
file_nom <- paste0("insumo/", anio, "_", mes, "_ml.xlsx")
# Carga el archivo Excel correspondiente y agrega una columna con el año y mes
archivo <- readxl::read_xlsx(file_nom) %>%
mutate(mes = paste(anio, mes, sep = "-"))
archivo <- archivo %>%
mutate(across(c(TOTAL_AREA, COVERED_AREA, BEDROOMS, ROOMS, HAS_LAUNDRY,
HAS_GYM, HAS_MULTIPURPOSE_ROOM, HAS_PARTY_ROOM,
HAS_SWIMMING_POOL, HAS_GRILL, FULL_BATHROOMS, PROPERTY_AGE),
as.numeric))
archivo <- archivo %>%
mutate(across(c(TOTAL_AREA, COVERED_AREA, BEDROOMS, ITE_CURRENT_PRICE, PRECIO_LOCAL,
ROOMS, HAS_LAUNDRY, HAS_GYM, HAS_MULTIPURPOSE_ROOM,
HAS_SWIMMING_POOL, HAS_GRILL, FULL_BATHROOMS, PROPERTY_AGE),
~ as.integer(round(as.numeric(.)))))
glimpse(archivo)
# revisa si nuestro archivo a limpiar no tiene id duplicados
archivo_duplicados <- archivo[duplicated(archivo$`Item ID`), ]
# crea otra tabla con los datos sospechosos (valores repetidos)
verifica_Cual_borra_Repetido <- archivo %>%
filter(
(SIT_CURRENCY_ID == "ARG" & grepl("^([0-8])\\1+$", as.character(PRECIO_LOCAL))) | # Si la moneda es ARS y el precio tiene un patrón repetitivo
(SIT_CURRENCY_ID == "DOL" & grepl("^([0-8])\\1+$", as.character(ITE_CURRENT_PRICE))) # Si la moneda es USD y el precio tiene un patrón repetitivo
) %>%
mutate(
PRECIO_LOCAL = as.numeric(PRECIO_LOCAL),
ITE_CURRENT_PRICE = as.numeric(ITE_CURRENT_PRICE)
)
# Filtra el archivo eliminando los valores con patrones repetitivos.
archivo <- archivo %>%
filter(
(SIT_CURRENCY_ID == "ARG" & !grepl("^([0-8])\\1+$", as.character(PRECIO_LOCAL))) |
(SIT_CURRENCY_ID == "DOL" & !grepl("^([0-8])\\1+$", as.character(ITE_CURRENT_PRICE)))
) %>%
mutate(
PRECIO_LOCAL = as.numeric(PRECIO_LOCAL),
ITE_CURRENT_PRICE = as.numeric(ITE_CURRENT_PRICE)
)
# De nuestro archivo a limpiar Elimina las filas donde ambas columnas (TOTAL_AREA y COVERED_AREA) sean nulas
archivo <- archivo %>%
filter(
!is.na(TOTAL_AREA) | !is.na(COVERED_AREA)
)
# Convierte las coordenadas a valores numéricos y reemplaza los `NA`
archivo <- archivo %>%
mutate(across(
c(ITE_ADD_LATITUDE, ITE_ADD_LONGITUDE),
~ replace_na(as.numeric(.), NA)
))
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>% # Une con la tabla de cotización usando la columna "mes"
mutate(
LONGITUDE = str_replace_all(ITE_ADD_LONGITUDE, ",", "."), # Reemplaza comas por puntos en las coordenadas
LATITUDE = str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom), 2) # Redondea el tipo de cambio a 2 decimales
)
archivo <- filter(archivo, !is.na(LATITUDE) | LATITUDE == "")
archivo <- filter(archivo, !is.na(LONGITUDE) | LONGITUDE == "")
archivo <- st_as_sf(archivo,
coords = c("LONGITUDE", "LATITUDE"),
crs = 4326
)
archivo <- mutate(archivo,
dummy_dolar = ifelse(SIT_CURRENCY_ID == "DOL", T, F)
) %>%
mutate(
precio_pesos = round(
ifelse(dummy_dolar == F, as.numeric(ITE_CURRENT_PRICE),as.numeric(ITE_CURRENT_PRICE) * tc_prom), 2
),
precio_dolares = round(
ifelse(dummy_dolar == T, as.numeric(ITE_CURRENT_PRICE),as.numeric(ITE_CURRENT_PRICE) / tc_prom), 2
)
)
# invoco a las funiones para realizar los calculos necesarios
# Función para calcular 'pesosm2tot'
pesosm2tot_funct <- function(precio_pesos, TOTAL_AREA) {
round(precio_pesos / TOTAL_AREA, 0)
}
# Función para calcular 'dolaresm2tot'
dolaresm2tot_funct <- function(precio_dolares, TOTAL_AREA) {
round(precio_dolares / TOTAL_AREA, 0)
}
# Función para calcular 'pesosm2_cub'
pesosm2_cub_funct <- function(precio_pesos, COVERED_AREA) {
round(precio_pesos / COVERED_AREA, 0)
}
# Función para calcular 'dolaresm2_cub'
dolaresm2_cub_funct <- function(precio_dolares, COVERED_AREA) {
round(precio_dolares / COVERED_AREA, 0)
}
archivo$TOTAL_AREA <- as.numeric(archivo$TOTAL_AREA)
archivo <- archivo %>%
mutate(
pesosm2tot = round(pesosm2tot_funct(precio_pesos, TOTAL_AREA), 0),
dolaresm2tot = round(dolaresm2tot_funct(precio_dolares, TOTAL_AREA), 0),
pesosm2_cub = round(pesosm2_cub_funct(precio_pesos, COVERED_AREA), 0),
dolaresm2_cub = round(dolaresm2_cub_funct(precio_dolares, COVERED_AREA), 0)
) %>%
select(
-MESLISTING, -ITE_ADD_STATE_NAME, -ITE_ADD_CITY_NAME,
-ITE_ADD_LONGITUDE, -ITE_ADD_LATITUDE, -ITE_ADD_NEIGHBORHOOD_NAME_1,
-ITE_ADD_NEIGHBORHOOD_NAME, -SIT_SITE_ID
)
archivo <- sf::st_join(archivo, ZDP_sivys, join = sf::st_within)
archivo <- sf::st_join(archivo, zonas_sivys, join = sf::st_within)
archivo <- archivo %>%
mutate(Ambientes = case_when(
ROOMS <= 1 ~ "1 ambiente",
ROOMS == 2 ~ "2 ambientes",
ROOMS >= 3 ~ "Mas de 3 ambientes",
TRUE ~ NA_character_ # Caso por defecto si ninguna condición se cumple
))
archivo <- archivo %>%
mutate(Anio_propiedad = case_when(
PROPERTY_AGE == 0 ~ 2025,
PROPERTY_AGE < 1890 ~ (2025 - PROPERTY_AGE),
TRUE ~ PROPERTY_AGE # Caso por defecto si ninguna condición se cumple
))
archivo <- archivo %>%
mutate(cantidad_anio = case_when(
!is.na(Anio_propiedad) ~ (2025 - Anio_propiedad), # Si Anio_propiedad no es NA, calcula la antigüedad
TRUE ~ Anio_propiedad # Si es NA, lo deja igual
)) %>%
filter(cantidad_anio <= 135 | is.na(cantidad_anio)) # Filtra antigüedad válida o NA
# Elimina los poligonos que no cumplen en tres de febrero.
archivo_limp <- st_filter(archivo, zonas_sivys, .predicate = st_within)
paste(
nrow(archivo) - nrow(archivo_limp),
"casos han sido limpiados por no estar contenidos en los poligonos de localidades.", " Se eliminó el",
round((nrow(archivo) - nrow(archivo_limp)) / nrow(archivo) * 100, 2), "porcien de los casos"
)
cas_elimin <- nrow(archivo) - nrow(archivo_limp)
#limpia mts2 totales menores a mts2 cubiertos.
archivo_limp <- archivo_limp %>% filter(TOTAL_AREA >= COVERED_AREA)
# muestra los casos eliminados por mts2 totales menores a mts2 cubiertos.
paste(
nrow(archivo) - (nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por mts2 totales menores a mts2 cubiertos.", " Se eliminó el",
round((nrow(archivo) - nrow(archivo_limp)) / nrow(archivo) * 100, 2), "%"
)
print(cas_elimin)
archivo_limp <- filter(archivo_limp, archivo_limp$TOTAL_AREA >= 10)
paste(
nrow(archivo) - (nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por tener metros cuadrados totales menores a 10", " Se eliminó el",
round((nrow(archivo) - (nrow(archivo_limp) + cas_elimin)) / (nrow(archivo) + cas_elimin) * 100, 2), "porcien de los casos"
)
print(cas_elimin)
archivo_limp <- archivo_limp[(archivo_limp$OPERATION == "Venta" & archivo_limp$dolaresm2tot >= 100) |
archivo_limp$OPERATION == "Alquiler", ]
limp_vent_casa <- filter(archivo_limp, OPERATION == "Venta", PROPERTY_TYPE == "Casa")
limp_vent_casa <- limp_vent_casa %>%
group_by(nombre) %>%
mutate(
outlier = case_when(
n() >= 20 ~ dolaresm2tot %in% boxplot.stats(dolaresm2tot)$out,
TRUE ~ FALSE # Si hay menos de 100 publicaciones, no se marcan outliers
)
) %>%
ungroup()
# Guardar los outliers eliminados
outliers_vent_casa <- limp_vent_casa %>%
filter(outlier) %>%
select(nombre, dolaresm2tot) # Selecciona columnas clave (puedes agregar más)
write_csv(outliers_vent_casa, paste0("Resultados2/outliers_eliminados/outliers_venta_casa_localidad_", mes, "_", anio,".csv"))
# Eliminar los outliers del dataset principal
archivo_limp_vent_sin_out_casa <- limp_vent_casa %>%
filter(!outlier) %>%
select(-outlier)
#-------------------------------------------------------------------------#
limp_vent_departamento <- filter(archivo_limp, OPERATION == "Venta", PROPERTY_TYPE == "Departamento")
limp_vent_departamento <- limp_vent_departamento %>%
group_by(nombre) %>%
mutate(
outlier = case_when(
n() >= 20 ~ dolaresm2tot %in% boxplot.stats(dolaresm2tot)$out,
TRUE ~ FALSE # Si hay menos de 100 publicaciones, no se marcan outliers
)
) %>%
ungroup()
# Guardar los outliers eliminados
outliers_vent_depto <- limp_vent_departamento %>%
filter(outlier) %>%
select(nombre, dolaresm2tot) # Selecciona columnas clave (puedes agregar más)
write_csv(outliers_vent_casa, paste0("Resultados2/outliers_eliminados/outliers_venta_depto_localidad_", mes, "_", anio,".csv"))
# Eliminar los outliers del dataset principal
archivo_limp_vent_sin_out_depto <- limp_vent_departamento %>%
filter(!outlier) %>%
select(-outlier) # Quita la columna auxiliar
# unifica el archivo de Venta (casa y depto)
archivo_limp_sin_out_completo_venta <- bind_rows(archivo_limp_vent_sin_out_casa, archivo_limp_vent_sin_out_depto)
limp_vent_otros <- filter(archivo_limp, OPERATION == "Venta", PROPERTY_TYPE != "Casa", PROPERTY_TYPE != "Departamento")
archivo_limp_sin_out_completo_venta <- bind_rows(archivo_limp_sin_out_completo_venta,limp_vent_otros )
# creamos la variable que contiene los datos de alquiler y departamento.
limp_alq_departamento <- filter(archivo_limp, OPERATION == "Alquiler")
# unifica el archivo de Venta y alquiler.
archivo_limp_sin_out_completo <- bind_rows(archivo_limp_sin_out_completo_venta, limp_alq_departamento)
archivo_limp_sin_out_completo_venta <- bind_rows(archivo_limp_sin_out_completo_venta, limp_vent_otros)
# Calcular diferencia de publicaciones eliminadas por tipo de propiedad
diferencias_publicaciones3 <- data.frame(
PROPERTY_TYPE = c("Casa", "Departamento"),
eliminados = c(
nrow(limp_vent_casa) - nrow(archivo_limp_vent_sin_out_casa),
nrow(limp_vent_departamento) - nrow(archivo_limp_vent_sin_out_depto)
)
)
# Mostrar resultado
print(diferencias_publicaciones3)
# calcula diferencia de publicaciones del archivo limpio con out y sin out general
diferencia_publicaciones4 <- nrow(archivo_limp) - nrow(archivo_limp_sin_out_completo)
# Mostrar resultado
print(diferencia_publicaciones4)
carpeta <- paste0("Resultados2/combinado_por_mes/Localidades/", mes, "_", anio)
dir.create(carpeta, recursive = TRUE)
# Crear la ruta completa del archivo CSV
ruta <- paste0(carpeta, "/archivo_limp_sin_out_completo.csv")
# Guardar el archivo CSV en la ruta generada
write_csv(archivo_limp_sin_out_completo, ruta)
