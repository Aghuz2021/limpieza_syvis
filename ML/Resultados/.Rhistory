install.packages(httr)
install.packages(httr)
install.packages("httr")
library(httr)
install.packages(httr)
install.packages('httr')
install.packages('httr')
install.packages('ows4R')
install.packages('svDialogs')
install.packages('svDialogs')
install.packages('tidyverse')
install.packages('svDialogs')
install.packages('tidyverse')
install.packages('sp')
install.packages('nngeo')
install.packages('lwgeom')
install.packages('writexl')
install.packages('sf')
install.packages('ows4R')
install.packages('lwgeom')
install.packages('sf')
install.packages('sf')
install.packages('sf')
library(httr)
library(ows4R)
library(svDialogs)
library(tidyverse)
library(tidyverse)
library(sp)
library(nngeo)
library(lwgeom)
library(writexl)
rm(list=ls())
options(scipen = 100)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
#Se asignan zonas por localidad.
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
mutate( zonas = case_when(
nombre == "11 de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Mart�n" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre
)
)
detach("package:dplyr", unload = TRUE)
library(dplyr)
#Se asignan zonas por localidad.
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
mutate( zonas = case_when(
nombre == "11 de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Mart�n" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre
)
)
#Se asignan zonas por localidad.
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
mutate( zonas = case_when(
nombre == "11 de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Mart�n" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre
)
)
rm(list=ls())
options(scipen = 100)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
#Se asignan zonas por localidad.
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
mutate( zonas = case_when(
nombre == "11 de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Mart�n" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre
)
)
rm(list=ls())
options(scipen = 100)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
#Se asignan zonas por localidad.
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
mutate( zonas = case_when(
nombre == "11 de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Mart�n" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre
)
)
cot_dolar <- readxl::read_xlsx(paste0("insumo/","cot_dolar.xlsx")) %>%
mutate(mes = format(as.Date(mes), format = "%Y-%m"))
ZDP_sivys <- sf::read_sf("insumo/desarrollo_prioritario.geojson")
#cREA UN ARCHIVO
# archivo <- read_csv("insumo/11-12-23.ml.csv")
anio <- dlg_input(message="Ingresar año en formato AAAA")$res
mes <- dlg_input(message="Ingresar mes formato MM")$res
file_nom <- paste0("insumo/ML/",anio,"_",mes,"_ml.xlsx")
archivo <- readxl::read_xlsx(file_nom) %>%
mutate(mes = paste(anio,mes, sep= '-'))
rm(list=ls())
options(scipen = 100)
wd <- dirname(rstudioapi::getSourceEditorContext()$path)
setwd(wd)
#Se asignan zonas por localidad.
zonas_sivys <- sf::read_sf("insumo/zonas.geojson") %>%
mutate( zonas = case_when(
nombre == "11 de Septiembre" ~ "Norte",
nombre == "Churruca" ~ "Norte",
nombre == "El Libertador" ~ "Norte",
nombre == "Loma Hermosa" ~ "Norte",
nombre == "Remedios de Escalada de San Mart�n" ~ "Norte",
nombre == "Pablo Podestá" ~ "Norte",
nombre == "Ciudadela" ~ "Sur",
nombre == "José Ingenieros" ~ "Sur",
nombre == "Villa Raffo" ~ "Sur",
nombre == "Ciudad Jardín Lomas del Palomar" ~ "Centro",
nombre == "Martín Coronado" ~ "Centro",
nombre == "Altos de Podestá" ~ "Centro",
nombre == "Villa Bosch" ~ "Centro",
nombre == "Sáenz Peña" ~ "Este",
nombre == "Santos Lugares" ~ "Este",
TRUE ~ nombre
)
)
cot_dolar <- readxl::read_xlsx(paste0("insumo/","cot_dolar.xlsx")) %>%
mutate(mes = format(as.Date(mes), format = "%Y-%m"))
ZDP_sivys <- sf::read_sf("insumo/desarrollo_prioritario.geojson")
#cREA UN ARCHIVO
# archivo <- read_csv("insumo/11-12-23.ml.csv")
anio <- dlg_input(message="Ingresar año en formato AAAA")$res
mes <- dlg_input(message="Ingresar mes formato MM")$res
file_nom <- paste0("insumo/",anio,"_",mes,"_ml.xlsx")
archivo <- readxl::read_xlsx(file_nom) %>%
mutate(mes = paste(anio,mes, sep= '-'))
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
library(stringr)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
library(stringr)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
detach("package:dplyr", unload = TRUE)
library(dplyr)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
rlang:;last_trace()
rlang::last_trace()
library(dtplyr)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
detach("package:stringr", unload = TRUE)
library(stringr)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
library(tools, lib.loc = "C:/Program Files/R/R-4.4.1/library")
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
install.packages("stringr")
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
library(stringr)
#Elimina las longitudes y latitudes que esten en blanco
archivo <- archivo %>%
left_join(cot_dolar, "mes") %>%
mutate(
LONGITUDE= str_replace_all(ITE_ADD_LONGITUDE, ",", "."),
LATITUDE= str_replace_all(ITE_ADD_LATITUDE, ",", "."),
tc_prom = round(as.numeric(tc_prom),2)
)
archivo <-filter(archivo, !is.na(LATITUDE)|LATITUDE=="")
archivo <-filter(archivo, !is.na(LONGITUDE)|LONGITUDE=="")
archivo <- st_as_sf(archivo, coords = c("LONGITUDE", "LATITUDE"),
crs = 4326)
archivo <- mutate(archivo,
dummy_dolar = ifelse(SIT_CURRENCY_ID == "DOL", T, F)) %>%
mutate(precio_pesos = round(ifelse(dummy_dolar == F, as.numeric(ITE_CURRENT_PRICE),
as.numeric(ITE_CURRENT_PRICE) * tc_prom),2),
precio_dolares = round(ifelse(dummy_dolar == T, as.numeric(ITE_CURRENT_PRICE)
, as.numeric(ITE_CURRENT_PRICE) / tc_prom),2))
# Función para calcular 'pesosm2tot'
pesosm2tot_funct <- function(precio_pesos, TOTAL_AREA) {
round(precio_pesos / TOTAL_AREA, 2)
}
# Función para calcular 'dolaresm2tot'
dolaresm2tot_funct <- function(precio_dolares, TOTAL_AREA) {
round(precio_dolares / TOTAL_AREA, 2)
}
# Función para calcular 'pesosm2_cub'
pesosm2_cub_funct <- function(precio_pesos, COVERED_AREA) {
round(precio_pesos / COVERED_AREA, 2)
}
# Función para calcular 'dolaresm2_cub'
dolaresm2_cub_funct <- function(precio_dolares, COVERED_AREA) {
round(precio_dolares / COVERED_AREA, 2)
}
# calcula pesosm2tot, dolaresm2tot, pesosm2_cub, dolaresm2_cub esto pordria ser funciones.
archivo <- archivo %>%
mutate(
pesosm2tot = pesosm2tot_funct(precio_pesos, TOTAL_AREA),
dolaresm2tot = dolaresm2tot_funct(precio_dolares, TOTAL_AREA),
pesosm2_cub = pesosm2_cub_funct(precio_pesos, COVERED_AREA),
dolaresm2_cub = dolaresm2_cub_funct(precio_dolares, COVERED_AREA)
) %>%
select(-MESLISTING,-ITE_ADD_STATE_NAME, -ITE_ADD_CITY_NAME,
-ITE_ADD_LONGITUDE,-ITE_ADD_LATITUDE, -ITE_ADD_NEIGHBORHOOD_NAME_1,
-ITE_ADD_NEIGHBORHOOD_NAME, -SIT_SITE_ID)
archivo <- sf::st_join(archivo, ZDP_sivys, join = sf::st_within)
View(archivo)
archivo <- sf::st_join(archivo, zonas_sivys, join = sf::st_within)
View(archivo)
archivo <- archivo %>%
mutate(Ambientes = case_when(
ROOMS <=1 ~ "1 ambiente",
ROOMS == 2 ~ "2 ambientes",
ROOMS >= 3 ~ "Mas de 3 ambientes",
TRUE ~ NA_character_  # Caso por defecto si ninguna condición se cumple
))
View(archivo)
archivo_limp <- st_filter(archivo, zonas_sivys, .predicate = st_within)
dplyr::last_dplyr_warnings()
paste(nrow(archivo)-nrow(archivo_limp),
"casos han sido limpiados por no estar contenidos en los poligonos de localidades."," Se eliminó el",
round((nrow(archivo)-nrow(archivo_limp))/nrow(archivo)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-nrow(archivo_limp)
archivo_limp <- archivo_limp %>% filter(TOTAL_AREA>=COVERED_AREA)
paste(nrow(archivo)-(nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por mts2 totales menores a mts2 cubiertos."," Se eliminó el",
round((nrow(archivo)-nrow(archivo_limp))/nrow(archivo)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-(nrow(archivo_limp))
# funcion para verificar todos digitos iguales
verificar_digitos_iguales <- function(digitos) {
digitos_str <- as.character(abs(digitos))  # Convert number to string
digitos <- strsplit(digitos_str, "")[[1]]  # Split number into individual digits
iguales <- length(unique(digitos)) == 1  # Check if all digits are the same
return(iguales)
}
# filtro digitos iguales en dolares.
archivo_limp$digitos_iguales <- sapply(archivo_limp$precio_dolares, verificar_digitos_iguales)
archivo_limp <- filter(archivo_limp,archivo_limp$digitos_iguales== FALSE)
paste(nrow(archivo)-(nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por haber digitos iguales (ej: 1111111) en dólares"," Se eliminó el",
round((nrow(archivo)-nrow(archivo_limp))/nrow(archivo)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-(nrow(archivo_limp))
archivo_limp$digitos_iguales_pesos <- sapply(archivo_limp$precio_pesos, verificar_digitos_iguales)
archivo_limp <- filter(archivo_limp,archivo_limp$digitos_iguales_pesos== FALSE)
paste(nrow(archivo)-(nrow(archivo_limp) + cas_elimin),
"casos han sido limpiados por haber digitos iguales (ej: 1111111) en pesos"," Se eliminó el",
round((nrow(archivo)-nrow(archivo_limp))/nrow(archivo)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-(nrow(archivo_limp))
archivo_limp <- filter(archivo_limp, archivo_limp$TOTAL_AREA >=25)
paste(nrow(archivo)-(nrow(archivo_limp)+cas_elimin),
"casos han sido limpiados por tener metros cuadrados totales menores a 25"," Se eliminó el",
round((nrow(archivo)-(nrow(archivo_limp)+cas_elimin))/(nrow(archivo)+cas_elimin)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-(nrow(archivo_limp))
archivo_limp <- filter(archivo_limp, archivo_limp$COVERED_AREA >=25)
paste(nrow(archivo)-(nrow(archivo_limp)+cas_elimin),
"casos han sido limpiados por tener metros cuadrados cubiertos menores a 25"," Se eliminó el",
round((nrow(archivo)-(nrow(archivo_limp)+cas_elimin))/(nrow(archivo)+cas_elimin)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-(nrow(archivo_limp))
archivo_limp$digitos_iguales_m2tot <- sapply(archivo_limp$TOTAL_AREA, verificar_digitos_iguales)
archivo_limp$borrar <- ifelse(archivo_limp$digitos_iguales_m2tot== TRUE  & archivo_limp$TOTAL_AREA > 100,TRUE,FALSE)
archivo_limp <- filter(archivo_limp, archivo_limp$borrar== FALSE)
paste(nrow(archivo)-(nrow(archivo_limp)+cas_elimin),
"casos han sido limpiados por mts2 totales con dígitos iguales y sean menores a 100"," Se eliminó el",
round((nrow(archivo)-(nrow(archivo_limp)+cas_elimin))/(nrow(archivo)+cas_elimin)*100,2),"porcien de los casos")
cas_elimin <- nrow(archivo)-(nrow(archivo_limp))
archivo_limp <- archivo_limp %>% filter(PROPERTY_TYPE == "Casa"| PROPERTY_TYPE == "Departamento" | PROPERTY_TYPE == "PH")
archivo_limp_alq <- filter(archivo_limp, archivo_limp$OPERATION=="Alquiler")
archivo_limp_vent <- archivo_limp %>% filter(OPERATION=="Venta")
out <- boxplot.stats(archivo_limp_vent$dolaresm2tot)$out
out_ind <- which(archivo_limp_vent$dolaresm2tot %in% c(out))
outliers_vent <- archivo_limp_vent[out_ind, ]
archivo_limp_vent_sin_out <- archivo_limp_vent[-out_ind, ]
archivo_limp_vent_sin_outs <- filter(archivo_limp_vent_sin_out, dolaresm2tot >= 100)
write_csv(archivo_limp_vent_sin_outs, paste("Resultados/ML/venta",anio,mes,"venta.csv",
sep = "_"))
write_csv(archivo_limp_vent_sin_outs, paste("Resultados/venta",anio,mes,"venta.csv",
sep = "_"))
View(archivo_limp_vent_sin_outs)
out <- boxplot.stats(archivo_limp_alq$pesosm2tot)$out
out_ind <- which(archivo_limp_alq$pesosm2tot %in% c(out))
outliers_alq <- archivo_limp_alq[out_ind, ]
archivo_limp_alq_sin_out <- archivo_limp_alq[-out_ind, ]
write_csv(archivo_limp_alq_sin_out, paste("Resultados/ML",anio,mes,"alq.csv", sep = "_"))
file_list <- list.files(path = paste(wd,"Resultados", sep= "/"),
pattern= "*alq.csv")
setwd(paste(wd,"Resultados", sep= "/"))
combinado_alq <- read_csv("combinado_alqui.csv", col_types = cols(.default = "c"))
alquiler_sumar <- read_csv(paste("ML_",anio,"_",mes,"_alq.csv", sep = ""),col_types = cols(.default = "c"))
combinado_alq <- bind_rows(combinado_alq, alquiler_sumar)
write_csv(combinado_alq, "combinado_alqui.csv")
combinado_vent <- read_csv("combinado_venta.csv", col_types = cols(.default = "c"))
venta_sumar <- read_csv(paste("ML_",anio,"_",mes,"_venta.csv", sep = ""),col_types = cols(.default = "c"))
combinado_vent <- bind_rows(combinado_vent, venta_sumar)
write_csv(combinado_vent, "combinado_venta.csv")
frequency_df <- as.data.frame(table(combinado_alq$`ID Final`))
frequency_df <- filter(frequency_df, Freq > 1)
combinado_alq <- filter(combinado_alq, `ID Final` %in% frequency_df$Var1)
combinado_alq <- arrange(combinado_alq, `ID Final`, mes)
write.csv(combinado_alq, "evolucion_alq.csv")
frequency_df <- as.data.frame(table(combinado_vent$`ID Final`))
frequency_df <- filter(frequency_df, Freq > 1)
combinado_vent <- filter(combinado_vent, `ID Final` %in% frequency_df$Var1)
combinado_vent <- arrange(combinado_vent, `ID Final`, mes)
write.csv(combinado_vent, "evolucion_venta.csv")
datos <- read.csv("C:\Users\Usuario\Desktop\Backup Tierras cx\Documentos\GitHub\ML\Resultados\\combinado_alqui.csv")
datos <- read.csv("C:\Users\Usuario\Desktop\Backup Tierras cx\Documentos\GitHub\ML\Resultados\\combinado_alqui.csv")
datos <- read.csv("C:\\Users\\Usuario\Desktop\Backup Tierras cx\Documentos\GitHub\ML\Resultados\\combinado_alqui.csv")
datos <- read.csv("C:\\Users\\Usuario\\Desktop\\Backup Tierras cx\\Documentos\\GitHub\\ML\\Resultados\\combinado_alqui.csv")
datos_ordenados <- datos[order(datos$ID.Final, datos$mes), ]
View(datos_ordenados)
datos <- read.csv("C:\\Users\\Usuario\\Desktop\\Backup Tierras cx\\Documentos\\GitHub\\ML\\Resultados\\evolucion_alq.csv")
datos_ordenados <- datos[order(datos$ID.Final, datos$mes), ]
datos_actualizados <- datos_ordenados[!duplicated(datos_ordenados$ID.Final, fromLast = TRUE), ]
View(datos_actualizados)
write.csv(datos_actualizados, "C:\\Users\\Usuario\\Desktop\\Backup Tierras cx\\Documentos\\GitHub\\ML\\Resultados\\actualizados_alq.csv", row.names = FALSE)
datos_venta <- read.csv("C:\\Users\\Usuario\\Desktop\\Backup Tierras cx\\Documentos\\GitHub\\ML\\Resultados\\evolucion_venta.csv")
datos_ordenados_venta <- datos_venta[order(datos_venta$ID.Final, datos_venta$mes), ]
datos_actualizados_venta <- datos_ordenados_venta[!duplicated(datos_ordenados_venta$ID.Final, fromLast = TRUE), ]
write.csv(datos_actualizados_venta, "C:\\Users\\Usuario\\Desktop\\Backup Tierras cx\\Documentos\\GitHub\\ML\\Resultados\\actualizados_venta.csv", row.names = FALSE)
